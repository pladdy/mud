#alias _rest_then_enable_stepper {
  log.info Resting then re-enabling stepper;

  #math {regen_per_round} {$gp1_max / 100 * 2};
  #math {amount_to_regen} {$gp1_max - $gp1};
  #math {rounds_to_regen} {$amount_to_regen / $regen_per_round + 5};

  #nop Round is seconds * 2 (2s / round);
  #local min_seconds $rounds_to_regen * 2;
  #math rando {1 d 10};
  #math regen_time {$min_seconds + $rando};

  #delay {reactivate_stepper} {
    log.info "Re-activating stepper after regen time: $regen_time seconds.";
    stepper on;
  } {$regen_time};

  #unvar rando;
}

#alias actuate {
  run cyborg_actuator;
  #send actuate %0;
  f2;
}

#alias check_stepper {
  #if {$corpses < 1 && "$stepper" == "on"} {stepper off};
  #else {
    #format {current_time} {%T};
    #math {time_since_stepper_started} {$current_time - $stepper_started};

    #if {"$stepper" == "on" && ($time_since_stepper_started > 750 || $corpses < 8)} {
      log.info Disabling stepper, need to rest.;
      stepper off;

      #if {@combat_rounds_left{} < 5} {
        _rest_then_enable_stepper;
      };
      #else {
        dtrig _rest_then_enable_stepper;
      };
    };
  };
}

#alias cos {
  #send !unwield $wielded_weapon;
  #send !configure strategy %0;
  #send !wield $wielded_weapon;
}

#alias f10 {
  use_corpse;
  #send !get all;
}

#alias f12 {
  #if {"$map[room_info][name]" == "cyborgs_donates"} {
    #loop 2 $BAGS_TO_USE i {
      #send !get all from bag $i;
      #send !store all;
    };
  };
  #else {
    #loop 2 $BAGS_TO_USE i {#send !sell all from bag $i};
  }
}

#alias mip_combat_hook {
  #local MIN_POWER 400;
  #if {$corpses > 0 && $gp1 < $MIN_POWER} {redc};
  check_stepper;
};

#alias mip_gline1_hook {
  #nop Example;
  #nop I~<gND:> <yYes><g[><y58%><g]> <g[><yIPP><g|><yGE><g|><yAA><g|><yHNE><g|><yMDF><g]><gSI: [><y68.3215%><g]>;
  #local data %0;
  #regexp {$data} {IPP} {#nop;} {#send !activate intrinsic preservation proxy};
  #regexp {$data} {AA} {#nop;} {#send !activate assault animus};
  #regexp {$data} {GE} {#nop;} {#send !activate grip enhancer};
  #regexp {$data} {HNE} {#nop;} {#send !activate hadronic negation emitter};

  #regexp {$data} {SI: [><y{\d+\.\d+}%><g]} {#var gxp &1};
  calculate_delta gxp;
}

#alias redc {
  #send !unwrap smallest;
  #send !decompose;
}

#alias reet {
  #send !unwrap smallest;
  #send !eat corpse;
}

#alias reload_configure {
  #textin tin/guilds/cyborgs/configure.txt
}

#alias use_corpse {
  #if {$gp1 == $gp1_max && "$use_spoon" == "true"} {#send !eat corpse};
  #else {#send !decompose};
  #send !hp;
}
