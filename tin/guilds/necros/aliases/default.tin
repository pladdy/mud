#alias ani {
  log.debug creating follower;
  #send !qtrance follower;
  #send !=name mojo;
  #send !con 100;
  #var follower_blocked false;
}

#alias attempt_absorb_prime {
  log.debug attempting absorb prime;

  #if {$rounds_in_combat > 0 && $ncorpses > 0 && $hpp < 0.6} {
    #send !abb;
  };
}

#alias attempt_call {
  log.debug attempting call;

  #if {"$necro_use_call" == "true"} {
    #if {$rounds_in_combat > 0 && "$familiar_called" != "true"} {
      #send !call;
      #var familiar_called true;
    };
  };
}

#alias attempt_dart {
  log.debug attempting dart;
  #if {$rounds_in_combat > 0 && "$can_dart" == "true" && $gp1p > $spp} {cd};
}

#alias attempt_dream {
  log.debug attempting dream;
  #if {$rounds_in_combat > 0 && "$can_dream" == "true" && $spp < .5} {#send !z};
}

#alias attempt_follower_heal {
  #if {$necro_follower_health < 90} {
    #send =heal 500;
  }
}

#alias attempt_glamor {
  log.debug attempting $necro_glamor;
  #if {$glamors > 1 &&
       "$glamor_active" != "true" &&
       ($spp < .6 || $gp1p < .9) && $rounds_in_combat > 0
  } {
    #if {"$necro_veil_omega_maxed" == "true"} {#send !$necro_glamor};
    #elseif {"$veil" != "ON"} {#send !$necro_glamor};
  };
}

#alias attempt_preserve {
  log.debug attempting preserve;

  #if {$ncorpses < $MAX_NECRO_CORPSES && $corpses > 0} {
    rep;
  };
}

#alias attempt_protection {
  log.debug attempting protection;
  #if {$rounds_in_combat > 0 && "$protection" == "OFF"} {#send !pro};
}

#alias attempt_refill_corpses {
  #if {$ncorpses < $MIN_NECRO_CORPSES} {
    #if {$follower_corpses > 0 && "$follower_blocked" == "false"} {
      log.info Attempting to refill corpses.;
      #send !gfc;
    };
    #elseif {$smuggle[corpses] > 0} {
      #send !smuggle remove corpse;
      #send !keep corpse;
    }
  };
}

#alias attempt_spfuse {
  log.debug attempting spfuse;
  #if {$spp < .7 && $spfuse > 0} {#send !spfuse $spfuse};
}

#alias attempt_unload_corpses {
  #if {$ncorpses >= $MAX_NECRO_CORPSES
       && "$necro_follower" != "none"
       && "$necro_follower" != "Undead"
       && $follower_corpses < $MAX_FOLLOWER_CORPSES
       && "$follower_blocked" == "false"
      } {
    log.info Attempting to unload corpses.;
    #send !pfc;
  }
}

#alias attempt_veil {
  log.debug attempting veil of darkness;
  #if {$rounds_in_combat > 0 && "$veil" == "OFF"} {#send !veil invoke};
}

#alias attempt_worth {
  #local MAX_WORTH 125;
  #if {$worth < $MAX_WORTH && $worth != 75} {#send !con 100};
  #elseif {$worth < $MAX_WORTH} {#show <130>Worth is low!;}
}

#alias cd {
  #send !create dart 100;
  #send !dart;
}

#alias check_stepper {
  #math total_corpses {$corpses + $ncorpses + $follower_corpses};

  #if {$total_corpses < 4 && "$stepper" == "on"} {stepper off};
  #else {
    #format {current_time} {%T};
    #math {time_since_stepper_started} {$current_time - $stepper_started};

    #if {"$stepper" == "on" && $time_since_stepper_started > 750} {
      stepper off;

      log.info Creating delay 'reactivate_stepper' to activate stepper after regen.;

      #nop Round is seconds * 2 (2s / round);
      #local min_seconds 10;
      #math rando {1 d 20};
      #math regen_time {$min_seconds + $rando};

      #delay {reactivate_stepper} {
        log.info "Re-activating stepper after regen time: $regen_time seconds.";
        stepper on;
      } {$regen_time};

      #unvar rando;
    };
  };
}


#alias commands_after_corpse {
  #var familiar_called false;
}

#alias dncor {
  run ncorpses;
  #send !unkeep all corpse;
  #send !store all;
  #if {"$necro_follower" != "none"} {
    #delay 4 {
      #send !=give all;
      #send !store all;
      #send !lookup;
    };
  };
  #else {
    #send !lookup;
  }
}

#alias f10 {
  use_corpse;
  #send !f;
}

#alias f12 {
  #if {$map[current_room] == 26817} {
    #loop 2 $BAGS_TO_USE i {
      #send !donate all from bag $i;
    };
  } {
    #loop 2 $BAGS_TO_USE i {
      #send !sell all from bag $i;
    };
  };
}

#nop  Avoid using qtrance to get all from chest;
#alias gcs {
  #send !retrieve;
  #send !open chest;
  #send !get all from chest;
  #send !close chest;
  #send !deliver;
}

#alias login_commands {
  #nop  Assumes 'gmore inventory' is not paging;
  #send !powers;  
}

#alias reab {
  log.debug unwrap and absorb;
  #send !unwrap smallest;
  #send !ab;
}

#alias reabf {
  log.debug unwrap, freeze, and absorb;
  #send !unwrap smallest;
  #send !freeze;
  #send !ab;
}

#alias reabb {
  log.debug unwrap, and absorb prime;
  #send !unwrap smallest;
  #send !abb;
}

#alias reabbf {
  log.debug unwrap, freeze, and absorb prime;
  #send !unwrap smallest;
  #send !freeze;
  #send !abb;
}

#alias rep {
  log.debug unwrap and preserve;
  #send !unwrap smallest;
  #send !p;
}

#alias relog_commands {
  #nop  Assumes 'gmore inventory' is not paging;
  #send !powers;
}

#alias smoke {
  #send !smoke %1;
  #map move %1;
}

#alias topoff {
  #math ginseng_diff {999 - $ginseng};
  #math black_pearls_diff {999 - $black_pearls};
  #math spider_web_diff {999 - $spider_web};
  #math goldenrod_diff {999 - $goldenrod};
  #math mandrake_diff {999 - $mandrake};
  #math pine_needles_diff {999 - $pine_needles};
  #math nightshade_diff {999 - $nightshade};
  #math bloodmoss_diff {999 - $bloodmoss};

  #if {$map[current_room] == 26852} {
    log.info Topping of reagents;
    #if {$ginseng_diff > 0} {#send !buy $ginseng_diff ginseng};
    #if {$black_pearls_diff > 0} {#send !buy $black_pearls_diff black pearls};
    #if {$spider_web_diff > 0} {#send !buy $spider_web_diff spider web};
    #if {$goldenrod_diff > 0} {#send !buy $goldenrod_diff goldenrod};
    #if {$mandrake_diff > 0} {#send !buy $mandrake_diff mandrake};
    #if {$pine_needles_diff > 0} {#send !buy $pine_needles_diff pine needles};
    #if {$nightshade_diff > 0} {#send !buy $nightshade_diff nightshade};
  }
}

#alias use_corpse {
  #if {$ncorpses < $MAX_NECRO_CORPSES} {p};
  #else {
    #if {$hpp < $spp && $hpp < $gp1} {#send !abb};
    #else {#send !ab};
  };
}
