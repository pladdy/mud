#alias dq {
  #list dq_list create %0;
  #local dq_string {};
  #local dq_count 0;

  #if {@length{%1} > 0} {
    #foreach { $dq_list[%*] } {arg} {
      #if {@length{$arg} > 0} {
        #nop Add comma if more than one defense option is given;
        #if {$dq_count > 0} { #format dq_string {%s%s} {$dq_string} {,} };

        #switch {"$arg"} {
          #case "v" { #format dq_string {%s%s} {$dq_string} {void} };
          #case "p" { #format dq_string {%s%s} {$dq_string} {parry} };
          #case "b" { #format dq_string {%s%s} {$dq_string} {block} };
          #case "ri" { #format dq_string {%s%s} {$dq_string} {riposte} };
          #case "re" { #format dq_string {%s%s} {$dq_string} {reversal} };
        };

        #math {dq_count} {$dq_count + 1};
        #if {$dq_count >= 5} {#break};
      };
    };

    #if {@length{$dq_string} > 0} {
      !defensequeue clear;

      #if {$dq_count == 1} { !defensequeue $dq_string,none; }
                           { !defensequeue $dq_string;      };
    };
  } {
    #showme <170>To change, pass in an ordered list of powers.  Ex: dq v p b re ri;
    !defensequeue;
  }
  #unvar dq_list;
}

#alias dq_gxp {
  !defensequeue parry,riposte,block,void;
}

#alias dqa {
  !defensequeue reversal,void,block,parry,riposte;
}

#alias dqc {!defensequeue clear;}

#alias dqo {
  !defensequeue reversal,parry,riposte,void,block;
};

#alias dqd {
  !defensequeue void,block,parry,riposte;
}
