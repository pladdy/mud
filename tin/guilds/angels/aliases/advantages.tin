#alias attempt_awe {
  #if {"$use_awe" == "true" &&
       @enough_distance_and_time{} &&
       "$awed" != "true" &&
       ("$awe_foes" == "true" || $pct_hp <= $awe_at_hp_pct)} {
    !awe $highest_area;
    decrement_ts 2;
    reduce_sort;
  };
}

#alias attempt_disengage {
  #if {"$use_disengage" == "true" &&
       @enough_distance_and_time{} &&
       "$can_disengage" == "true"} {
    !disengage;
    decrement_ts 1;
    reduce_sort;
  };
}

#alias attempt_divine_strike {
  #if {@should_swing{} == 1} {
    !divine strike $highest_area;
    decrement_ts 2;
    reduce;
  }
}

#alias attempt_presage {
  #local MIN_ADV 20;
  sort_advantages;

  #if {"$use_presage" == "true" &&
       @enough_distance_and_time{} &&
       $adv_sort[1][2] > $MIN_ADV} {
    !presage $adv_sort[1][1];
    decrement_ts 1;
    reduce_sort;
  };
  #else {
    attempt_disengage;
  };
}

#alias attempt_providence {
  #if {"$use_providence" == "true" &&
       @enough_distance_and_time{}} {
    sort_advantages;

    #if {$adv_sort[1][2] > $providence_at} {
      !providence $adv_sort[1][1];
      decrement_ts 1;
      reduce_sort;
    };
  };

  attempt_disengage;
}

#alias attempt_retribution {
  #if {"$use_retribution" == "true" &&
       @should_swing{} == 1 &&
       $retributions > $retribution_at} {
    !retribution $highest_area;
    decrement_ts 1;
    reduce_sort;
  };
}

#alias attempt_swing {
  sort_advantages;
  #var highest_area $adv_sort[1][1];

  #if {@should_swing{} == 1} {
    #math {pct_hp} {$hp / $hp_max * 100.0};

    attempt_awe;
    attempt_retribution;
    attempt_divine_strike;
    attempt_swing;
  };
}

#alias decrement_ts {
  #math {time_slices} {$time_slices - %1};
}

#function enough_distance_and_time {
  #if {$angel[distance] == 0 && $time_slices >= $min_ts} {
    #return 1;
  } {
    #return 0;
  };
}

#alias reduce {
  #math {advantages[$highest_area]} {$advantages[$highest_area] / 2};
}

#alias reduce_sort {
  reduce;
  sort_advantages;
}

#function should_swing {
  #if {@enough_distance_and_time{} && $adv_sort[1][2] > $swing_at} {
    #return 1;
  } {
    #return 0;
  };
}

#alias sort_advantages {
  #nop sort them in descending order by value (k: location, v: advantage);
  #var i {1};
  #list adv_sort clear;

  #foreach {ho;hi;lo;li} {loc} {
    #if {$i == 1} {
      #var adv_sort[$i] { {1}{$loc}{2}{$advantages[$loc]} };
    } {
      #var j {1};
      #var found {0};

      #foreach $adv_sort[%*] {item} {
        #if { $advantages[$loc] > $adv_sort[$j][2] } {
          #list adv_sort insert $j { {1}{$loc}{2}{$advantages[$loc]} };
          #var found {1};
          #break;
        };

        #math {j} {$j + 1};
        #replace {j} {.00} {};
      };

      #if {$found == 0} {
        #list adv_sort add $j;
        #list adv_sort insert $j { {1}{&0}{2}{$advantages[$loc]} };
        #list adv_sort delete -1;
      };
    };

    #math {i} {$i + 1};
  };
}
