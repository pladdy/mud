#alias attempt_disengage {
  #if {$angel[distance] == 0 &&
       "$can_disengage" == "true" &&
       "$disengage_foes" == "true" &&
       $time_slices > 0} {
    !disengage;
    decrement_ts 1;
  };
}

#alias attempt_presage {
  #if {$angel[distance] == 0 &&
       $adv_sort[1][2] > 20 &&
       $time_slices >= $min_ts} {
    !presage $adv_sort[1][1];
    decrement_ts 1;
  };
  #else {
    attempt_disengage;
  };
}

#alias attempt_providence {
  #if {$angel[distance] == 0 && $time_slices >= $min_ts} {
    sort_advantages;
    #if {$adv_sort[1][2] > $swing_at_adv} {
      !providence $adv_sort[1][1];
      decrement_ts 1;
    };
  };

  attempt_disengage;
}

#alias attempt_swing {
  #if {$angel[distance] == 0 &&
       $adv_sort[1][2] > $swing_at_adv &&
       $time_slices > $min_ts} {
    #math {pct_hp} {$hp / $hp_max * 100.0};

    #if {"$awed" != "true" &&
         ("$awe_foes" == "true" || $pct_hp <= $awe_at_hp_pct)} {
      !awe $adv_sort[1][1];
      decrement_ts 2;
    };
    #elseif {$retributions > $retribution_at} {
      !retribution $adv_sort[1][1];
      decrement_ts 1;
    };
    #else {
      !divine strike $adv_sort[1][1];
      decrement_ts 2;
    };

    #nop DS/awe takes half your advantage away and costs 2 TS;
    #math {adv_sort[1][2]} {$adv_sort[1][2] / 2};
  };
}

#alias decrement_ts {
  #math {time_slices} {$time_slices - %1};
}

#alias sort_advantages {
  #nop sort them in descending order by value (k: location, v: advantage);
  #var i {1};

  #forall {ho;hi;lo;li} {
    #if {$i == 1} {
      #var adv_sort[$i] { {1}{&0}{2}{$advantages[&0]} };
    } {
      #var j {1};
      #var found {0};

      #foreach $adv_sort[%*] {item} {
        #if { $advantages[&0] > $adv_sort[$j][2] } {
          #list adv_sort insert $j { {1}{&0}{2}{$advantages[&0]} };
          #var found {1};
          #break;
        };

        #math {j} {$j + 1};
        #replace {j} {.00} {};
      };

      #if {$found == 0} {
        #list adv_sort add $j;
        #list adv_sort insert $j { {1}{&0}{2}{$advantages[&0]} };
        #list adv_sort delete -1;
      };
    };

    #math {i} {$i + 1};
  };
}

