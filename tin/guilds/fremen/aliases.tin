#alias adjust_litany {
  #if {"$adjust_litany" == "on"} {
    #var adjust_litany off;
  };
  #else {
    #var adjust_litany on;
  }
}

#alias am {
  #send !hide;
  #send !pain none;
  #send !assault;
  #send !pain;
  #delay {2} {
    #send !fk m %0;
    #send !assault none;
    #send !pain;
    #send !assault;
  };
}

#alias amp {
  #send !hide;
  #send !poison;
  am %0;
}

#alias attempt_adjust_litany {
  #math {hp_as_pct} {($hp * 1.00)/ $hp_max};

  #nop Litany settings: low, some, minor, half, major, most, high, all;

  #if {$hp_as_pct < 0.90 && $hp_as_pct >= 0.80 && $adjusted_litany_level < 1} {
    #send !assault none;litany major;assault;
    #var adjusted_litany_level 1;
  };
  #elseif {$hp_as_pct < 0.80 && $hp_as_pct >= 0.70 && $adjusted_litany_level < 2} {
    #send !assault none;litany most;assault;
    #var adjusted_litany_level 2;
  };
  #elseif {$hp_as_pct < 0.70 && $hp_as_pct >= 0.60 && $adjusted_litany_level < 3} {
    #send !assault none;litany high;assault;
    #var adjusted_litany_level 3;
  };
  #elseif {$hp_as_pct < 0.60 && $adjusted_litany_level < 4} {
    #send !assault none;litany all;assault;
    #var adjusted_litany_level 4;
  };
}

#alias attempt_hide {
  #if {$hp_as_pct < 0.6 && $rounds_in_combat > 0 && "$can_hide" = "true"} {
    #3 #send !hide;
  };
}

#alias attempt_stun {
  #if {
    @combat_rounds_left{} > 8
    && $hp_as_pct <= 1.00
    && "$stun_active" != "true" 
    && "$voice_active" != "true"
    && "$stun_recovering" != "true"
    && $gp1 > 200} {
    #send !stun;
  };
}

#alias attempt_voice {
  #if {
    @combat_rounds_left{} > 8
    && $hp_as_pct < 0.85
    && "$voice_active" != "true"
    && "$voice_recovering" != "true"
    && $gp1 > 200} {
    #send !voice;
  };
}

#alias commands_after_corpse {
  #var stun_active false;
  #var stun_failures 0;
  #var stun_recovering false;
  #var voice_active false;
  #var voice_failures 0;
  #var voice_recovering false;
  #var adjusted_litany_level 0;
  #var can_hide true;

  #if {$litany_focus_map[$litany_focus] < 80 && "$stepper" == "on"} {
    stepper off;
    #send !su;
    #delay {20} {stepper on};
  };
  #elseif {$litany_focus_map[$litany_focus] < 80} {
    #send !su;
  };
}

#alias check_stepper {
  #if {$corpses < 1 && "$stepper" == "on"} {stepper off};
  #else {
    #format {current_time} {%T};
    #math {time_since_stepper_started} {$current_time - $stepper_started};

    #if {"$stepper" == "on" && $time_since_stepper_started > 750} {
      stepper off;

      log.info Creating delay 'reactivate_stepper' to activate stepper after regen.;

      #nop Round is seconds * 2 (2s / round);
      #local min_seconds 10;
      #math rando {1 d 20};
      #math regen_time {$min_seconds + $rando};

      #delay {reactivate_stepper} {
        log.info "Re-activating stepper after regen time: $regen_time seconds.";
        stepper on;
      } {$regen_time};

      #unvar rando;
    };
  };
}

#alias count_available_spices {
  #list spices[inv] size available_inv_spices;
  #list spices[bag] size available_bag_spices;
  #math available_spices {$available_inv_spices + $available_bag_spices};
}

#alias donate_stripe {
  #if {$gp1 >= 625} {
    #25 {
      #send !fill literjon;
      #send !donate literjon;
    };
  };
  #else {
    #showme Not enough water to donate a stripe.  625 water needed.;
  };
}

#alias drc {
  holster_weapons;
  #send !draw crysknife;
}

#alias drcp {
  holster_weapons;
  #send !draw crysknife;
  #nop do agony after guild automation and before guild attacks;
  #send !repeat combat/agony/0/2;
}

#alias drl {
  holster_weapons;
  #send !draw lasgun;
  #send !attacks normal;
  #send !reflexes blinding;
  #send !repeat off;
}

#alias drm {
  holster_weapons;
  #send !draw maula pistol;
  #send !attacks normal;
  #send !reflexes blinding;
  #send !repeat off;
}

#alias drp {
  holster_weapons;
  #send !draw pulse sword;
  #send !repeat off;
}

#alias f10 {use_corpse}

#alias f12 {
  #if {$map[current_room] == 8187} {
    #showme <170>Keeping all to avoid donating wrong things!;
    #send !keep all;
    #loop 2 $BAGS_TO_USE i {
      #send !get all from bag $i;
      #send !donate all;
    };
  };
  #else {
    #loop 2 $BAGS_TO_USE i {#send !sell all from bag $i};
  };
}

#alias holster_weapons {
  #send !sheathe knife;
  #send !sheathe sword;
  #send !holster gun;
  #send !do clear;
}

#alias mip_combat_hook {
  #math {hp_as_pct} {($hp * 1.00)/ $hp_max};
  #format gp1_raw_pct {%f} {$gp1 / $gp1_max};
  #math {total_water} {$gp1 + $gp2};
  #format total_water_pct {%f} {$total_water / $gp1_max};

  #if {$rounds_in_combat > 0 && $total_water_pct < 1.3 && $gp1_raw_pct < .1 && $corpses > 0} {
    rerc;
    #send !sip literjon;
  };

  attempt_hide;
  attempt_stun;
  attempt_voice;
  check_stepper;
}

#alias mip_gp1_hook {
  #if {$gp1_raw_pct > .9 && $total_water_pct > 1} {
    #send !fill literjon;
  };
}

#alias rerc {
  #send !unwrap;
  #send !reclaim;
  #send !hp;
}

#alias refi {
  #send !unwrap;
  #send !fai;
}

#alias respice {
  #if {$available_inv_spices > 0} {
    log.info Spice available in inventory.;
    #list spices[inv] get 1 spice_task;
    #send !$spice_task;
    #list spices[inv] delete 1;
  };
  #elseif {$available_bag_spices > 0} {
    log.info Spice available in bag.;

    #list spices[bag] get 1 spice_task;

    #nop  Try to get drink/spice from bag;
    #regexp {$spice_task} {%!{(drink|take)} {[a-z]+}} {#var drink &2};

    gb $drink 1;
    #send !$spice_task;
    #list spices[bag] delete 1;
  };
  #else {
    log.warn No spices left!;
  }
}

#alias spice_chk {
  #send !i;
}

#alias spices {
  #list spices[inv] clear;
  #list spices[bag] clear;
  spice_chk;
  #delay {2} {
    count_available_spices;
    #var spices[inv];
    #var spices[bag]};
};

#alias use_corpse {
  #local MAX_WATER_RATIO 1.2;

  #send !hp;
  #if {$total_water_pct < $MAX_WATER_RATIO} {#send !reclaim} {#send !fai};
  #send !hp;
}

#alias wimpy_commands {
  #send !hide;
  commands_after_corpse;
  #delay {2} {#send !suspend};
}
