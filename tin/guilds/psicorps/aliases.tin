#alias attempt_actuation {
  #if {$rounds_in_combat > 0} {
    #nop Defense first;
    #regex {$mip[gline1]} {Vr} {#nop;} {#send !vr};
    #regex {$mip[gline1]} {Bf} {#nop;} {#send !bf};
    #regex {$mip[gline1]} {Cp} {#nop;} {#send !cp};

    #nop Offense;
    #regex {$mip[gline1]} {Cg} {#nop;} {#send !cg};
    #regex {$mip[gline1]} {bc} {#nop;} {#send !bc};

    #nop Perks;
    #regex {$mip[gline1]} {Vv} {#nop;} {#send !vv};
    #regex {$mip[gline1]} {AA} {#nop;} {#send !aa bear};
  };
}

#alias check_stepper {
  #format {current_time} {%T};
  #math {time_since_stepper_started} {$current_time - $stepper_started};

  #if {"$stepper" == "on" && $time_since_stepper_started > 750 } {
    stepper off;

    log.info Creating delay 'reactivate_stepper' to activate stepper after regen.;

    #nop Round is seconds * 2 (2s / round);
    #local min_seconds 10;
    #math rando {1 d 20};
    #math regen_time {$min_seconds + $rando};

    #delay {reactivate_stepper} {
      log.info "Re-activating stepper after regen time: $regen_time seconds.";
      stepper on;
    } {$regen_time};

    #unvar rando;
  };
}

#alias f10 {use_corpse};

#alias f12 {
  #loop 2 8 i {#send !sell all from bag $i};
}

#alias mip_combat_hook {
  #math gp1_percent {$gp1 / $gp1_max * 1.00};
  #math gp2_percent {$gp2 / $gp2_max * 1.00};

  #math {max_convert} {$sp / 10};
  #math {gp1_delta} {$gp1_max - $gp1};
  #if {$sp >= $sp_max && $gp1_delta > $max_convert} {#send !convert};

  attempt_actuation;
  pause_active_stepper;
}

#alias mip_gline1_hook {
  #local data %0;
  #nop Example;
  #nop AA: 898;
  #var psicorps_power {};
  #var psicorps_duration {};

  #parse {$data} {c} {
    #regexp {$c} {%+1D} {#var psicorps_power $psicorps_power$c};
    #regexp {$c} {%+1d} {#var psicorps_duration $psicorps_duration$c};
    #if {"$c" == " " && $psicorps_duration > 0} {
      #replace {psicorps_power} {:} {};
      #replace {psicorps_power} { } {};

      #if {$psicorps_duration < 20 && $gp1_percent > .2} {
        #send !actuate $psicorps_power;
      };
      #var psicorps_power {};
      #var psicorps_duration {};
    };
  };
}

#alias mip_gline2_hook {
  #local data %0;
  #nop Example;
  #nop G2N: 74,230 / 47%;

  #regexp {$data} {G2N: {[\d|,]+}} {
    #var gxp &1;
    #replace {gxp} {,} {};
    calculate_delta gxp;
  } {false};
}

#alias fr {
  #if {"%0" == "reset"} {
    #unvar fold_reality_active;
    #unvar fold_reality_location;
    #return;
  };

  #send !fold reality;
}

#alias pause_active_stepper {
  #local MIN_PSI_PCT .25;
  #local MIN_STAM_PCT .25;
  #local REGEN_SECONDS 50;

  #if {
    ($enemy > 0 && "$stepper" == "on") 
    && ($gp1_percent < $MIN_PSI_PCT || $gp2_percent < $MIN_STAM_PCT)
  } {
    log.warn "Need to regen, setting dtrig to pause stepper.";
    dtrig stepper off,#delay pause_stepper {stepper on} $REGEN_SECONDS;
  };
}

#alias use_corpse {
  #send !hp;
  #send !eat corpse;
  #send !hp;
  #send !get all;
}

#alias resp {
  #send !unwrap smallest;
  #send !eat corpse;
}
