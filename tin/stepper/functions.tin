#function choose_a_dir {
  #list cardinal_exits size index_count;

  #math {random_index} {1 d $index_count};
  #return $cardinal_exits[$random_index];
}

#nop This does a loop on all non monsters.  It's done this way because the key;
#nop can be a wild card match for a monster name;

#function mob_is_blacklisted {
  #local monster %0;
  #var result false;

  #foreach { $non_monsters[%*] } {non_monster} {
    #if {"$non_monster" == ""} {#continue};

    #nop tintin regex;
    #regexp {$monster} {%i$non_monster} {#replace result {false} {true}};

    #nop pcre regex;
    #format {monster_lc} {%l} {$monster};
    #regexp {$monster_lc} {%!{$non_monster}} {#replace result {false} {true}};

    log.debug checking '$monster' vs '$non_monster', match? '$result';

    #if {"$result" == "true"} {
      log.debug '$monster' is blacklisted based on '$non_monster', skipping;
      #break;
    };
  };

  #unvar non_monster;
  #return $result;
}

#function transform_mob {
  #local transform_string $monster_transforms[%0];

  #if {"$transform_string" == ""} {
    #regexp {%0} {^%ia {.+}} {#var result &1} {#var result %0};
    #nop Replace any text in '{}' braces, like 'Orc Sergeant {bloodlust}';
    #replace {result} { {{.+}}} {};
  };
  #else {#return $transform_string};
  #return $result;
}

#alias test_blacklist {
  #local monster %0;

  load_non_monsters;
  #showme Testing monster: '$monster';
  #showme Blacklisted: @mob_is_blacklisted{$monster};

  #nop #unvar non_monsters;
}
