#class mip kill;
#class mip open;

#nop Referencing https://github.com/Inix3K/TinTin/blob/master/3k/mip.tin;

#var mip;

#alias debug_mip {
  #if {"$show_mip" == "true"} {
    log.info Disabling MIP debugging.;
    #var show_mip false;
  };
  #else {
    log.info Enabling MIP debugging.;
    #var show_mip true;
  };
}

#alias enable_mip {
  #math mip[secret] {1 d 99999};
  #format mip[secret] {%+5s} $mip[secret];
  #replace mip[secret] { } {0};

  #info system save;

  #send 3klient $mip[secret]~$info[SYSTEM][CLIENT_NAME]$info[SYSTEM][CLIENT_VERSION];
  #SEND 3klient LINEFEED on; #nop include linefeed with messages;
  #SEND 3klient HAA off; #nop turns off room item messages;

  #var mip[enabled] true;

  #nop initialize enmy to 0;
  #var enemy 0;
  calculate_delta enemy;
}

#action {^#K\%$mip[secret]{\d{3}}{.{3}}{.*}} {
  log.warn MIP code that doesn't match action;

  #var mip[raw] %0;
  #var mip[length] %1;
  #var mip[code] %2;
  #if {@length{%3} > 0} {#var mip[data] %3};
  process_mip;
} {5}

#action {^%!{[> ]*}#K\%$mip[secret]{\d{3}}{.{3}}{.*}} {
  #var mip[raw] %0;
  #var mip[length] %1;
  #var mip[code] %2;
  #nop DDD code can send no data...;
  #if {@length{%3} > 0} {#var mip[data] %3};
  process_mip;
} {1}

#alias process_mip {
  #if {@length{$mip[data]} > 0} {
    #math mip_data_length {$mip[length] - 3};
    #format {mip_data} {%.${mip_data_length}s} {$mip_raw_data};

    #var mip_remainder $mip[raw];
    #replace mip_remainder {$mip[data]} {};

    #if {"$show_mip" == "true"} {
      #showme <170>MIP Match;
      #showme The 0 var: $mip[raw];
      #showme The mip data length: $mip[length];
      #showme The mip code: $mip[code];
      #showme The mip data: $mip[data];
    };

    #switch {"$mip[code]"} {
      #nop mud special information;
      #case {"BAA"} {#show <160>Mud: $mip[data]<070>};
      #nop tells;
      #case {"BAB"} {process_tell $mip[data]};
      #nop guild special information;
      #case {"BAC"} {
        #format {mip[BAC_source]} {%n} {$guild};
        #show <150>$mip[data]<070>;
      };
      #nop room short description;
      #case {"BAD"} {#var mip[BAD] $mip[data]};
      #nop chat information;
      #case {"CAA"} {
        #var mip[CAA] $mip[data];
        process_chat_line $mip[data];
      };
      #nop room exits;
      #case {"DDD"} {#var mip[DDD] $mip[data]};
      #nop composite MIP for hpbar variables;
      #case {"FFF"} {
        process_composite $mip[data];
      };
    };
  };

  #if {"$show_mip" != "true"} {#line gag}
}

#alias process_composite {
  #if {"$show_mip" == "true"} {#showme process_composite %0};

  #local hp_data_code {};
  #parse {%0} {c} {
    #if {"$hp_data_code" == "" && "$c" != "~"} {
      #local hp_data_code $c;
      #local data {};
      #local data_next 0;
      #continue;
    };

    #if {"$c" == "~"} {
      #if {"$data" != ""} {
        process_hp_data_code $hp_data_code with $data;
        #local hp_data_code {};
      };
      #if {$data_next == 1} {
        #local hp_data_code {};
      };
      #else {
        #local data_next 1;
      };
      #continue;
    };

    #local data $data$c;
  };

  #if {"$hp_data_code" != "" && "$data" != ""} {
    process_hp_data_code $hp_data_code with $data;
  };
  #if {$rounds_in_combat == 0} {
    #var enemy 0;
    calculate_deltas;
    refresh_status_bar;
  };
  _delay_refresh;
}

#alias {process_hp_data_code %1 with %2} {
  #local hp_data_code %1;
  #local data %2;

  #if {"$show_mip" == "true"} {#showme processing data code: %1 and %2};

  #switch {"$hp_data_code"} {
    #case {"A"} {
      #var hp $data;
    };
    #case {"B"} {
      #var hp_max $data;
    };
    #case {"C"} {
      #var sp $data;
    };
    #case {"D"} {
      #var sp_max $data;
    };
    #case {"E"} {
      #if {"$guild" == "mages"} {#math {gp1} {100 - $data}};
      #else {#var gp1 $data};
      mip_gp1_hook;
    };
    #case {"F"} {
      #if {"$guild" == "mages"} {#var gp1_max 100};
      #else {#var gp1_max $data};
    };
    #case {"G"} {
      #switch {"$guild"} {
        #case {"cyborgs"} {#math {gp2} {100 - $data}};
        #case {"jedi"} {#math {gp2} {100 - $data}};
        #case {"juggers"} {#math {gp2} {100 - $data}};
        #case {"mages"} {#math {gp2} {100 - $data}};
        #default {#var gp2 $data};
      };
      mip_gp2_hook;
    };
    #case {"H"} {
      #switch {"$guild"} {
        #case {"mages"} {#var gp2_max 100};
        #case {"cyborgs"} {#var gp2_max 100};
        #case {"juggers"} {#var gp2_max 100};
        #default {#var gp2_max $data};
      };
    };
    #case {"I"} {
      #if {@length{$data} > 0} {
        #var mip[gline1] $data;
        mip_gline1_hook $data;
      };
    };
    #case {"J"} {
      #if {@length{$data} > 0} {
        #var mip[gline2] $data;
        mip_gline2_hook $data;
      };
    };
    #case {"K"} {#var attacker $data};
    #case {"L"} {
      #var enemy $data;
    };
    #case {"N"} {
      #var rounds_in_combat $data;
      mip_combat_hook;
      calculate_deltas;
      refresh_status_bar;
    };
  };
}

#var chat_data {};

#alias process_chat_line {
  #local data %0;

  #if {"$show_mip" == "true"} {#showme processing chat in MIP '$data'};

  #nop Examples;
  #nop mage~Mage~Highjinx~[Mage(129)] Highjinx : good morning;
  #nop ptell~Party~highjinx~[PARTY] Highjinx: foo bar;
  #nop com~JEDI~~[JEDI]: Ylenic It'kla leaves the Academy;
  #regexp {$data} {{.*}~{.*}~{.*}~{.*}} {
    #local chat_type &1;
    #local line_name &2;
    #local player &3;
    #local message &4;

    #var skip_message false;
    #regexp {$message} {[PARTY] GOLD divvy called} {#var skip_message true};
    #regexp {$message} {[PARTY] All gold divvied} {#var skip_message true};

    #if {"$skip_message" == "false"} {
      #list chats add {$message};
      chats_refresh;
    };
  } {
    log.warn Failed to match chat line;
    #showme $data;
  };
}


#list tells_blocklist add {reaching};
#list tells_blocklist add {vanquished};
#list tells_blocklist add {moving};
#list tells_blocklist add {caught};
#list tells_blocklist add {her};
#list tells_blocklist add {his};
#list tells_blocklist add {the};
#list tells_blocklist add {your};
#list tells_blocklist add {you};
#list tells_blocklist add {with};
#list tells_blocklist add {$character};

#alias process_tell {
  #local data %0;
  #if {"$show_mip" == "true"} {#showme processing tell in MIP '$data'};

  #regexp {$data} {^~{.+}~{.+}$} {
    #local player &1;
    #local tell &2;

    #var send_alert true;

    #foreach $tells_blocklist blocked {
      log.debug checking blocklist, blocked=$blocked, actor=%1;
      #regexp {%1} {%i$blocked} {#var send_alert false};
    };

    #if {"$send_alert" == "true"} {
      log.debug 'tell' actor=$player;
      #if {$disable_chat_alerts != 1} {
        #list chats add {$player: $tell};
        chats_refresh;

        #if {"$stepper" == "on"} {
          sound_beeps;
          set_repeating_alarm;
          log.warn Tell received, 'th' to clear repeating alarm.;
          stepper off;
        };

        #undelay reactivate_stepper;
      };
    };
  };
}

#alias _delay_refresh {
  #undelay {refresh-status-bar};
  #delay {refresh-status-bar} {
    calculate_deltas;
    refresh_status_bar;
  } {2};
}

#class mip close;